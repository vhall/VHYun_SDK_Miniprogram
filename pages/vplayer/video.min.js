function WxVideo(t, e, i) { this.args = { wx: null, context: null, playerKey: "", id_: "", type: "vod", access_token: "", account_Id: "", aid: "", app_id: "" }; this.success = e || function () { }; this.failure = i || function () { }; this.vodQuality = []; this.vodUri = ""; this.dispatchDomain = "https://gslb.e.vhall.com"; this.isFull = false; this.currentSrc = ""; this.currentQuality = "same"; this.qualityList = ["same"]; this.viewUrl = {}; this.subSrc = []; this._token = { token: null, date: 0 }; this.player = null; for (var r in t) { this.args[r] = t[r] } if (!this.args.id_) { console.error("need dom id"); THIS.failure(); return } if (!this.args.wx) { console.error("wx object is must!"); THIS.failure(); return } this.initialization() } WxVideo.prototype.initialization = function () { if (this.args.type === "live") { var t = "https://api.vhallyun.com/sdk/v1/room/get-watch-info?client=js&package_check=peter&room_id=" + this.args.aid + "&app_id=" + this.args.app_id + "&third_party_user_id=" + this.args.account_Id + "&access_token=" + this.args.access_token } else { var t = "https://api.vhallyun.com/sdk/v1/demand/get-record-watch-info?client=js&package_check=peter&record_id=" + this.args.aid + "&app_id=" + this.args.app_id + "&third_party_user_id=" + this.args.account_Id + "&access_token=" + this.args.access_token } var i = this; wx.request({ url: t, method: "GET", success: function (t) { var e = t.data; if (e.code !== 200) { console.error("call sdk api failed, code =", e.code); i.failure(); return } if (i.args.type === "vod") { i.vodQuality = e.data.definition; i.vodUri = e.data.default_server.uri } i.dispatchDomain = e.data.dispatch_server; i.fetchSrc() }, fail: function (t) { console.error("call sdk api failed!!"); i.failure() } }) }; WxVideo.prototype.updatePlayerSrc = function (t) { var e = this.args.playerKey; var i = {}; i[e] = t + "?token=" + this._token.token; this.args.context.setData(i); if (this.args.type === "live") { this.player = this.args.wx.createLivePlayerContext(this.args.id_) } else { this.player = this.args.wx.createVideoContext(this.args.id_) } this.currentSrc = t }; WxVideo.prototype.play = function () { this.player.play() }; WxVideo.prototype.stop = function () { this.player.stop() }; WxVideo.prototype.inFullScreen = function () { if (!this.isFull) { this.player.requestFullScreen({ direction: 90 }); this.isFull = true } }; WxVideo.prototype.outFullScreen = function () { if (this.isFull) { this.player.exitFullScreen(); this.isFull = false } }; WxVideo.prototype.fetchSrc = function () { var t = this.args.wx; if (this.args.type === "live") { var e = this.dispatchDomain + "/api/dispatch_play?webinar_id=" + this.args.aid + "&rand=" + this.args.rand + "&uid=" + this.args.uid } else { var e = this.dispatchDomain + "/api/dispatch_replay?&webinar_id=" + this.args.aid + "&rand=" + this.args.rand + "&uid=" + this.args.uid + "&uri=" + this.vodUri + "&quality=" + JSON.stringify(this.vodQuality) } var o = this; t.request({ url: e, method: "GET", success: function (t) { var e = t.data; if (e.msg !== "success" || e.code !== "200") { console.error("The playback address request failed.", e); return } var i = e.data; var r = i.token; var s = crc32(r.split("_")[0].split("").reverse().join("")).toString(16); var a = s.toUpperCase() + "_" + r.split("_")[1]; if (o.args.type === "live") { o.viewUrl = i.httpflv_urls; o.viewUrl.keyWords = "httpflv_url" } else if (i.hls_domainnames) { o.viewUrl = i.hls_domainnames; o.viewUrl.keyWords = "hls_domainname" } else { o.viewUrl = i.mp4_domainnames; o.viewUrl.keyWords = "mp4_domainname" } n(a); o._token = { token: a, date: (new Date).getTime() }; o.updatePlayerSrc(o.subSrc[0]); o.success() }, fail: function (t) { console.error("The playback address request failed!", t); o.failure() } }); function n(t) { o.qualityList = []; for (var e in o.viewUrl) { if (typeof o.viewUrl[e] === "object") { o.qualityList.push(e) } } o.qualityList.sort(function (t, e) { if (t === "same") { return -1 } else if (e === "same") { return 1 } else if (t === "a") { return 1 } else if (e === "a") { return -1 } else if (t < e) { return 1 } return 0 }); var i = "same"; if (o.qualityList.indexOf(i) === -1) { var r = ["same", "720p", "480p", "360p", "a"]; for (var s in r) { if (o.qualityList.indexOf(r[s]) !== -1) { i = r[s]; break } } } o.subSrc = []; for (var a = 0, n = o.viewUrl[i].length; a < n; a++) { o.subSrc.push(o.viewUrl[i][a][o.viewUrl.keyWords]) } o.subSrcMaxIndex = o.subSrc.length - 1; o.subSrcIndex = 0; o.currentQuality = i } }; WxVideo.prototype.switchSrc = function () { if (this.subSrcMaxIndex <= 0) { console.error("current Src length <= 1, so can not switch src"); return } if (this.subSrcIndex >= this.subSrcMaxIndex) { this.subSrcIndex = 0 } else { this.subSrcIndex++ } var t = this.subSrc[this.subSrcIndex]; this.updatePlayerSrc(t); this.play(); return t }; WxVideo.prototype.getQualityList = function () { return this.qualityList }; WxVideo.prototype.getCurrentQuality = function () { return this.currentQuality }; WxVideo.prototype.switchQualityLevel = function (t, e) { var i = this.viewUrl[t]; if (!i) { console.error("no this quality"); return } this.subSrc = []; for (var r = 0, s = i.length; r < s; r++) { this.subSrc.push(i[r][this.viewUrl.keyWords]) } var a = this; this.subSrcMaxIndex = this.subSrc.length - 1; this.subSrcIndex = 0; this.currentQuality = t; if (this.args.type === "live" && this.isFull === true) { this.player.exitFullScreen({ complete: function () { a.updatePlayerSrc(a.subSrc[0]); a.player.requestFullScreen({ direction: 90 }) } }) } else { this.updatePlayerSrc(this.subSrc[0]) } if (this.args.type === "vod" && e) { this.args.context.setData({ initTime: e }) } this.play() }; var crc32 = function (t) { var e = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]; var i = 0 ^ -1; for (var r = 0; r < t.length; r++) { i = i >>> 8 ^ e[(i ^ t.charCodeAt(r)) & 255] } return (i ^ -1) >>> 0 }; module.exports = WxVideo;